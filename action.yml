name: 'Static Server Action'
description: 'Ultra-minimal Rust-based static file server for GitHub Actions testing'
author: 'johnz86'

branding:
  icon: 'server'
  color: 'blue'

inputs:
  directory:
    description: 'Directory to serve static files from'
    required: false
    default: '.'
  port:
    description: 'Port to serve on (1-65535)'
    required: false
    default: '8080'
  host:
    description: 'Host to bind to'
    required: false
    default: '127.0.0.1'

outputs:
  url:
    description: 'Server URL'
    value: ${{ steps.server.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: 🔧 Configure and Download Server
      id: setup
      shell: bash
      run: |
        # Validate directory
        if [[ ! -d "${{ inputs.directory }}" ]]; then
          echo "::error::Directory not found: ${{ inputs.directory }}"
          exit 1
        fi
        
        # Validate port
        if ! [[ "${{ inputs.port }}" =~ ^[0-9]+$ ]] || (( ${{ inputs.port }} < 1 || ${{ inputs.port }} > 65535 )); then
          echo "::error::Invalid port: ${{ inputs.port }}. Must be 1-65535"
          exit 1
        fi
        
        echo "📁 Directory: ${{ inputs.directory }}"
        echo "🔌 Port: ${{ inputs.port }}"
        echo "🌐 Host: ${{ inputs.host }}"
        
        # Determine platform
        case "$RUNNER_OS-$RUNNER_ARCH" in
          Linux-X64)     PLATFORM="linux-x64" ;;
          macOS-X64)     PLATFORM="macos-x64" ;;
          Windows-X64)   PLATFORM="windows-x64.exe" ;;
          *)
            echo "::error::Unsupported platform: $RUNNER_OS-$RUNNER_ARCH"
            exit 1
            ;;
        esac
        
        BINARY_NAME="static-serve-action$([[ "$RUNNER_OS" == "Windows" ]] && echo ".exe" || echo "")"
        TOOLS_DIR="${RUNNER_TEMP}/static-serve-action"
        mkdir -p "$TOOLS_DIR"
        
        echo "💻 Platform: $RUNNER_OS-$RUNNER_ARCH"
        
        # Check cache
        CACHE_HIT="false"
        if [[ -f "$TOOLS_DIR/$BINARY_NAME" ]]; then
          echo "♻️  Using cached binary"
          CACHE_HIT="true"
        else
          echo "📥 Downloading server binary ..."
          DOWNLOAD_URL="https://github.com/Johnz86/static-serve-action/releases/latest/download/static-serve-action-$PLATFORM"
          curl -fsSL "$DOWNLOAD_URL" -o "$TOOLS_DIR/$BINARY_NAME"
          chmod +x "$TOOLS_DIR/$BINARY_NAME"
          echo "✅ Download complete"
        fi
        
        echo "platform=$PLATFORM" >> "$GITHUB_OUTPUT"
        echo "binary-name=$BINARY_NAME" >> "$GITHUB_OUTPUT"
        echo "binary-path=$TOOLS_DIR/$BINARY_NAME" >> "$GITHUB_OUTPUT"
        echo "cache-hit=$CACHE_HIT" >> "$GITHUB_OUTPUT"

    - name: ⛃ Start Server
      id: server
      shell: bash
      run: |
        SERVER_URL="http://${{ inputs.host }}:${{ inputs.port }}"
        
        # Start server (it prints its own startup message)
        "${{ steps.setup.outputs.binary-path }}" \
          --directory "${{ inputs.directory }}" \
          --port "${{ inputs.port }}" \
          --host "${{ inputs.host }}" &
        
        SERVER_PID=$!
        
        # Quick sanity check
        sleep 0.5
        if [[ "$RUNNER_OS" != "Windows" ]] && ! kill -0 "$SERVER_PID" 2>/dev/null; then
          echo "::error::Server failed to start"
          exit 1
        fi
        
        # Set outputs and environment
        echo "url=$SERVER_URL" >> "$GITHUB_OUTPUT"
        echo "STATIC_SERVER_PID=$SERVER_PID" >> "$GITHUB_ENV"
        echo "STATIC_SERVER_URL=$SERVER_URL" >> "$GITHUB_ENV"

post:
  using: 'composite'
  steps:
    - name: 🛑 Stop Server
      shell: bash
      run: |
        if [[ -n "$STATIC_SERVER_PID" ]]; then
          echo "Stopping server (PID: $STATIC_SERVER_PID)"
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            taskkill //F //PID "$STATIC_SERVER_PID" 2>/dev/null || true
          else
            kill "$STATIC_SERVER_PID" 2>/dev/null || true
          fi
        fi
