name: 'Static Server Action'
description: 'Ultra-minimal Rust-based static file server for testing'
author: 'johnz86'

branding:
  icon: 'server'
  color: 'blue'

inputs:
  directory:
    description: 'Directory to serve static files from'
    required: false
    default: '.'
  port:
    description: 'Port to serve on'
    required: false
    default: '8080'
  host:
    description: 'Host to bind to'
    required: false
    default: '127.0.0.1'

outputs:
  url:
    description: 'Server URL'
    value: ${{ steps.start-server.outputs.url }}
  pid:
    description: 'Server process ID'
    value: ${{ steps.start-server.outputs.pid }}

runs:
  using: 'composite'
  steps:
    - name: Download binary
      shell: bash
      run: |
        set -e
        
        # Determine platform
        case "$RUNNER_OS-$RUNNER_ARCH" in
          Linux-X64)    URL_SUFFIX="linux-x64" ;;
          Linux-ARM64)  URL_SUFFIX="linux-arm64" ;;
          macOS-X64)    URL_SUFFIX="macos-x64" ;;
          macOS-ARM64)  URL_SUFFIX="macos-arm64" ;;
          Windows-X64)  URL_SUFFIX="windows-x64.exe" ;;
          *)            echo "::error::Unsupported platform: $RUNNER_OS-$RUNNER_ARCH"; exit 1 ;;
        esac
        
        BINARY_URL="https://github.com/Johnz86/static-serve-action/releases/latest/download/static-serve-action-$URL_SUFFIX"
        BINARY_NAME="static-serve-action$([[ "$RUNNER_OS" == "Windows" ]] && echo ".exe" || echo "")"
        
        echo "::notice::Downloading $BINARY_NAME for $RUNNER_OS-$RUNNER_ARCH"
        curl -fsSL "$BINARY_URL" -o "$BINARY_NAME"
        chmod +x "$BINARY_NAME"

    - name: Validate inputs
      shell: bash
      run: |
        if [[ ! -d "${{ inputs.directory }}" ]]; then
          echo "::error::Directory not found: ${{ inputs.directory }}"
          exit 1
        fi
        
        if ! [[ "${{ inputs.port }}" =~ ^[0-9]+$ ]] || (( ${{ inputs.port }} < 1 || ${{ inputs.port }} > 65535 )); then
          echo "::error::Invalid port: ${{ inputs.port }}. Must be 1-65535"
          exit 1
        fi

    - name: Start server
      id: start-server
      shell: bash
      run: |
        set -e
        
        BINARY_NAME="static-serve-action$([[ "$RUNNER_OS" == "Windows" ]] && echo ".exe" || echo "")"
        SERVER_URL="http://localhost:${{ inputs.port }}"
        
        echo "::notice::Starting server at $SERVER_URL"
        echo "::notice::Serving: ${{ inputs.directory }}"
        
        # Start server in background
        ./"$BINARY_NAME" -d "${{ inputs.directory }}" -p "${{ inputs.port }}" --host "${{ inputs.host }}" &
        SERVER_PID=$!
        
        # Wait and verify
        sleep 2
        if ! kill -0 "$SERVER_PID" 2>/dev/null && [[ "$RUNNER_OS" != "Windows" ]]; then
          echo "::error::Server failed to start"
          exit 1
        fi
        
        # Test connectivity
        for i in {1..10}; do
          if curl -fsSL --max-time 2 "$SERVER_URL" >/dev/null 2>&1; then
            echo "::notice::Server is ready"
            break
          elif [[ $i -eq 10 ]]; then
            echo "::warning::Server started but may not be responding yet"
          else
            sleep 1
          fi
        done
        
        # Set outputs and environment
        echo "url=$SERVER_URL" >> "$GITHUB_OUTPUT"
        echo "pid=$SERVER_PID" >> "$GITHUB_OUTPUT"
        echo "STATIC_SERVER_PID=$SERVER_PID" >> "$GITHUB_ENV"
        echo "STATIC_SERVER_URL=$SERVER_URL" >> "$GITHUB_ENV"
