name: 'Static Server Action'
description: 'Ultra-minimal Rust-based static file server for GitHub Actions testing'
author: 'johnz86'

branding:
  icon: 'server'
  color: 'blue'

inputs:
  directory:
    description: 'Directory to serve static files from'
    required: false
    default: '.'
  port:
    description: 'Port to serve on (1-65535)'
    required: false
    default: '8080'
  host:
    description: 'Host to bind to'
    required: false
    default: '127.0.0.1'

outputs:
  url:
    description: 'Server URL'
    value: ${{ steps.start-server.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Setup
      id: setup
      shell: bash
      run: |
        echo "::group::üîß Configuring Static Server"
        
        # Validate directory
        if [[ ! -d "${{ inputs.directory }}" ]]; then
          echo "::error::Directory not found: ${{ inputs.directory }}"
          exit 1
        fi
        echo "üìÅ Directory: ${{ inputs.directory }}"
        
        # Validate port
        if ! [[ "${{ inputs.port }}" =~ ^[0-9]+$ ]] || (( ${{ inputs.port }} < 1 || ${{ inputs.port }} > 65535 )); then
          echo "::error::Invalid port: ${{ inputs.port }}. Must be 1-65535"
          exit 1
        fi
        echo "üîå Port: ${{ inputs.port }}"
        echo "üåê Host: ${{ inputs.host }}"
        
        # Determine platform
        case "$RUNNER_OS-$RUNNER_ARCH" in
          Linux-X64)     PLATFORM="linux-x64" ;;
          Linux-ARM64)   PLATFORM="linux-arm64" ;;
          macOS-X64)     PLATFORM="macos-x64" ;;
          macOS-ARM64)   PLATFORM="macos-arm64" ;;
          Windows-X64)   PLATFORM="windows-x64.exe" ;;
          *)
            echo "::error::Unsupported platform: $RUNNER_OS-$RUNNER_ARCH"
            exit 1
            ;;
        esac
        
        BINARY_NAME="static-serve-action$([[ "$RUNNER_OS" == "Windows" ]] && echo ".exe" || echo "")"
        TOOLS_DIR="${RUNNER_TEMP}/static-serve-action"
        mkdir -p "$TOOLS_DIR"
        
        echo "üíª Platform: $RUNNER_OS-$RUNNER_ARCH ($PLATFORM)"
        echo "üî® Binary: $BINARY_NAME"
        
        echo "platform=$PLATFORM" >> "$GITHUB_OUTPUT"
        echo "binary-name=$BINARY_NAME" >> "$GITHUB_OUTPUT"
        echo "tools-dir=$TOOLS_DIR" >> "$GITHUB_OUTPUT"
        
        echo "::endgroup::"

    - name: Cache server binary
      id: cache-binary
      uses: actions/cache@v4
      with:
        path: ${{ steps.setup.outputs.tools-dir }}
        key: static-serve-action-${{ steps.setup.outputs.platform }}-${{ hashFiles('**/action.yml') }}

    - name: Download server
      if: steps.cache-binary.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "::group::üì• Downloading Server Binary"
        
        cd "${{ steps.setup.outputs.tools-dir }}"
        DOWNLOAD_URL="https://github.com/Johnz86/static-serve-action/releases/latest/download/static-serve-action-${{ steps.setup.outputs.platform }}"
        
        echo "üîó Source: $DOWNLOAD_URL"
        echo "üì¶ Size: ~486KB"
        
        curl -fsSL "$DOWNLOAD_URL" -o "${{ steps.setup.outputs.binary-name }}"
        chmod +x "${{ steps.setup.outputs.binary-name }}"
        
        # Show file info
        if command -v file &> /dev/null; then
          echo "üìÑ Binary info: $(file "${{ steps.setup.outputs.binary-name }}")"
        fi
        
        echo "‚úÖ Download complete!"
        echo "::endgroup::"

    - name: Use cached server
      if: steps.cache-binary.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo "::group::‚ôªÔ∏è  Using Cached Server"
        echo "‚ú® Found cached binary at: ${{ steps.setup.outputs.tools-dir }}/${{ steps.setup.outputs.binary-name }}"
        echo "üöÄ Skipping download - ready to serve!"
        echo "::endgroup::"

    - name: Start server
      id: start-server
      shell: bash
      run: |
        echo "::group::üöÄ Starting Static Server"
        
        BINARY_PATH="${{ steps.setup.outputs.tools-dir }}/${{ steps.setup.outputs.binary-name }}"
        SERVER_URL="http://${{ inputs.host }}:${{ inputs.port }}"
        
        # Start server in background (it will print its own nice logs)
        "$BINARY_PATH" \
          --directory "${{ inputs.directory }}" \
          --port "${{ inputs.port }}" \
          --host "${{ inputs.host }}" &
        
        SERVER_PID=$!
        
        # Quick sanity check
        sleep 0.5
        if [[ "$RUNNER_OS" != "Windows" ]] && ! kill -0 "$SERVER_PID" 2>/dev/null; then
          echo "::error::Server failed to start"
          exit 1
        fi

        echo "url=$SERVER_URL" >> "$GITHUB_OUTPUT"
        echo "STATIC_SERVER_PID=$SERVER_PID" >> "$GITHUB_ENV"
        echo "STATIC_SERVER_URL=$SERVER_URL" >> "$GITHUB_ENV"
        
        echo "::endgroup::"

post:
  using: 'composite'
  steps:
    - name: Stop server
      shell: bash
      run: |
        if [[ -n "$STATIC_SERVER_PID" ]]; then
          echo "::group::üõë Stopping Static Server"
          echo "üìä Shutting down server (PID: $STATIC_SERVER_PID)"
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            taskkill //F //PID "$STATIC_SERVER_PID" 2>/dev/null || true
          else
            kill "$STATIC_SERVER_PID" 2>/dev/null || true
          fi
          
          echo "‚úÖ Server stopped successfully"
          echo "::endgroup::"
        fi
